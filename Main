import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

public class Main {

	public static void main(String[] args) throws InterruptedException {

		//create guess
		String guess = null;
		
		// set the empty deck
		String[] deck = new String[21];

		// print initial message
		System.out.println("You wanna see a card trick?");
		System.out.println("Pick a card and memorize it or write it down.");
		System.out.println("Don't tell me what card you picked!");
		System.out.println("Note: A is the Ace, K is the king, Q is the queen, and J is the jack.");
		System.out.println("Note: C is clubs, D is diamonds, H is hearts, S is spades");

		// Function to fill the deck with cards
		BuildDeck(deck, 21);

		System.out.println("");
		System.out.println("Here are the cards in your deck! Pick one!");
		System.out.println(Arrays.toString(deck));
		System.out.println("");

		// play game
		for (int p = 0; p < 3; p++) {
			guess = iterate(deck);
		}
		
		System.out.println(guess);

	}

	private static String iterate(String[] deck) {
		Scanner scan = new Scanner(System.in);
		int guessInt;
		String guessString = null;
		int num = 0;

		String[][] format = new String[7][3];
		for (int r = 0; r < 7; r++) {
			for (int c = 0; c < 3; c++) {
				format[r][c] = deck[num];
				num++;
			}

		}

		print2DArray(format);

		System.out.print("What column is your card in: ");
		guessInt = scan.nextInt();

		sortDeck(guessInt, deck, format);

		guessString = deck[10];
		
		return guessString;
	}

	private static void sortDeck(int guessInt, String[] deck, String[][] format) {

		int num = 0;
		int timesThrough = 0;

		int i;
		int j;

		switch (guessInt) {
		case 1:
			while (timesThrough < 3) {
				for (i = 1; i < 2; i++) {
					for (j = 0; j < 7; j++) {
						deck[num] = format[j][i];
						num++;
					}
					timesThrough++;
				}

				for (i = 0; i < 1; i++) {
					for (j = 0; j < 7; j++) {
						deck[num] = format[j][i];
						num++;
					}
					timesThrough++;
				}
				for (i = 2; i < 3; i++) {
					for (j = 0; j < 7; j++) {
						deck[num] = format[j][i];
						num++;
					}
					timesThrough++;
				}
			}

			// column 2 then 1 then 3
			break;
		case 2:
			while (timesThrough < 3) {
				for (i = 0; i < 1; i++) {
					for (j = 0; j < 7; j++) {
						deck[num] = format[j][i];
						num++;
					}
					timesThrough++;
				}

				for (i = 1; i < 2; i++) {
					for (j = 0; j < 7; j++) {
						deck[num] = format[j][i];
						num++;
					}
					timesThrough++;
				}
				for (i = 2; i < 3; i++) {
					for (j = 0; j < 7; j++) {
						deck[num] = format[j][i];
						num++;
					}
					timesThrough++;
				}
			}

			// column 1 then 2 then 3
			break;
		case 3:
			while (timesThrough < 3) {
				for (i = 0; i < 1; i++) {
					for (j = 0; j < 7; j++) {
						deck[num] = format[j][i];
						num++;
					}
					timesThrough++;
				}

				for (i = 2; i < 3; i++) {
					for (j = 0; j < 7; j++) {
						deck[num] = format[j][i];
						num++;
					}
					timesThrough++;
				}
				for (i = 1; i < 2; i++) {
					for (j = 0; j < 7; j++) {
						deck[num] = format[j][i];
						num++;
					}
					timesThrough++;
				}
			}

			// column 1 then 3 then 2
			break;
		default:
			break;
		}

	}

	private static void print2DArray(String[][] format) {
		System.out.println("Column 1   Column 2   Column 3");
		for (int i = 0; i < format.length; i++) {
			System.out.println(Arrays.toString(format[i]).replace("[", "").replace(",", "").replace(" ", "         ")
					.replace("]", ""));
		}

	}

	private static void BuildDeck(String[] deck, int i) {
		Random rand = new Random();
		boolean firstTime = true;
		boolean inDeck = false;
		int randCard;

		// Hard code a fulle deck to choose from
		String[] fullDeck = { "AC", "AD", "AH", "AS", "2C", "2D", "2H", "2S", "3C", "3D", "3H", "3S", "4C", "4D", "4H",
				"4S", "5C", "5D", "5H", "5S", "6C", "6D", "6H", "6S", "7C", "7D", "7H", "7S", "8C", "8D", "8H", "8S",
				"9C", "9D", "9H", "9S", "10C", "10D", "10H", "10S", "JC", "JD", "JH", "JS", "QC", "QD", "QH", "QS",
				"KC", "KD", "KH", "KS" };

		int[] usedCards = new int[21];

		int j = 0;
		while (j < 21) {
			inDeck = false;
			randCard = rand.nextInt(52);

			// duplicate check needs a card in to work, add one on the first run!
			if (firstTime == true) {
				usedCards[j] = randCard;
				deck[j] = fullDeck[randCard];
				firstTime = false;
				j++;
			}

			usedCards[j] = randCard;

			// Loop checking for duplicates
			if (firstTime != true) {
				int k = 0;
				for (k = 0; k < j; k++) {
					if (usedCards[k] == randCard) {
						// System.out.println("Card already in deck!");
						inDeck = true;
					}
				}
				// If no duplicates... add it to the deck!
				if (inDeck == false) {
					deck[j] = fullDeck[randCard];
					j++;
				}
			}
		}
	}
}

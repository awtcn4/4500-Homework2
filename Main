//Java to compile
//Names: Amaya Saunsaucie and Andrew Taylor
//Date: 2/7/2022
//Class: 4500: Intro to software profession
//What program is designed to do: Pick 21 cards out of a full deck, and then perform the magic trick by getting the chosen card to
//the 11th spot in the array after 3 iterations of choosing what column it is in.
//Main Data Structures: Array-this is what the full deck is in and then 21 are chosen, 2d Array-this is what the cards are sorted in
//External Files: None

import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

public class Main {
	
	public static void main(String[] args) throws InterruptedException {

		//create bools
		boolean playing = true;
		boolean valid = true;
		
		//create ints
		int timesPlayed = 0;
		
		//create scanner
		Scanner scan = new Scanner(System.in);
		
		//create Strings
		String guess = null;
		String play;
		
		// set the empty deck
		String[] deck = new String[21];

		// print initial message
		System.out.println("You wanna see a card trick?");
		System.out.println("Pick a card and memorize it or write it down.");
		System.out.println("Don't tell me what card you picked!");
		System.out.println("Note: A is the Ace, K is the king, Q is the queen, and J is the jack.");
		System.out.println("Note: C is clubs, D is diamonds, H is hearts, S is spades");

		while(playing == true) {
		
		// Function to fill the deck with cards
		BuildDeck(deck, 21);

		System.out.println("");
		System.out.println("Here are the cards in your deck! Pick one!");
		System.out.println(Arrays.toString(deck));
		System.out.println("");

		// play game
		for (int p = 0; p < 3; p++) {
			guess = iterate(deck);
		}
		
		System.out.println("The card you picked was " + guess + "!");
		
		System.out.println("Would you like to play again(y/n): ");
		play = scan.next();
		
		//input validation
		switch(play) {
		case "y":
		case "Y":
		case "n":
		case "N":
			break;
		default:
			valid = false;
			break;
			}
		
		while(valid == false) {
			System.out.println("Input was invalid, try again. Enter 'y' to play again or 'n' to not:");
			
			play = scan.next();
			
			switch(play) {
			case "y":;
			case "Y":
			case "n":
			case "N":
				valid = true;
				break;
			default:
				valid = false;
				break;
				}
		}
		
		//Check if they want to play again
		if(valid == true) {
			timesPlayed++;
			playing = playAgain(play);
		}
		
		//If they do not want to play again
		if(playing == false) {
			System.out.println("Thank you for playing! You played " + timesPlayed + " times.");
		}
		
		}

	}

	//input validation for play again
	private static boolean playAgain(String play) {
		
		switch(play) {
		case "y":
			return true;
		case "Y":
			return true;
		case "n":
			return false;
		case "N":
			return false;
		default:
			break;
			}
		
		return false;
		
	}
	
	private static String iterate(String[] deck) {
		
		//create bools
		boolean invalid = true;
		
		//create scanner
		Scanner scan = new Scanner(System.in);
		
		//create ints
		int guessInt = 0;
		int num = 0;
		
		//create string
		String guessString = null;
		
		//puts cards into 2d array
		String[][] format = new String[7][3];
		for (int r = 0; r < 7; r++) {
			for (int c = 0; c < 3; c++) {
				format[r][c] = deck[num];
				num++;
			}

		}
		
		//Function to print cards to console
		print2DArray(format);
		
		System.out.print("What column is your card in: ");
		System.out.println("");
		
		if(scan.hasNextInt()) {
			guessInt = scan.nextInt();
			//Input validation for what column card is in
			if((guessInt > 3) || (guessInt < 1)) {
				while((guessInt > 3) || (guessInt < 1)) {
					System.out.println("Input was invalid, try again. Enter 1,2 or 3:");
					guessInt = scan.nextInt();
				}
				
			}
		}else{
			do {
			System.out.println("Input was invalid, try again. Enter 1,2 or 3:");
			guessString = scan.next();
			if(scan.hasNextInt()) {
				guessInt = scan.nextInt();
				invalid = false;
			}else {
				invalid = true;
			}
			}while(invalid == true);
		}
		
		
		//sort deck
		sortDeck(guessInt, deck, format);

		//guess 11th card in deck, this is your card
		guessString = deck[10];
		
		return guessString;
	}

	//function to sort the deck
	private static void sortDeck(int guessInt, String[] deck, String[][] format) {

		int num = 0;
		int timesThrough = 0;

		int i;
		int j;

		switch (guessInt) {
		case 1:
			while (timesThrough < 3) {
				for (i = 1; i < 2; i++) {
					for (j = 0; j < 7; j++) {
						deck[num] = format[j][i];
						num++;
					}
					timesThrough++;
				}

				for (i = 0; i < 1; i++) {
					for (j = 0; j < 7; j++) {
						deck[num] = format[j][i];
						num++;
					}
					timesThrough++;
				}
				for (i = 2; i < 3; i++) {
					for (j = 0; j < 7; j++) {
						deck[num] = format[j][i];
						num++;
					}
					timesThrough++;
				}
			}

			// column 2 then 1 then 3
			break;
		case 2:
			while (timesThrough < 3) {
				for (i = 0; i < 1; i++) {
					for (j = 0; j < 7; j++) {
						deck[num] = format[j][i];
						num++;
					}
					timesThrough++;
				}

				for (i = 1; i < 2; i++) {
					for (j = 0; j < 7; j++) {
						deck[num] = format[j][i];
						num++;
					}
					timesThrough++;
				}
				for (i = 2; i < 3; i++) {
					for (j = 0; j < 7; j++) {
						deck[num] = format[j][i];
						num++;
					}
					timesThrough++;
				}
			}

			// column 1 then 2 then 3
			break;
		case 3:
			while (timesThrough < 3) {
				for (i = 0; i < 1; i++) {
					for (j = 0; j < 7; j++) {
						deck[num] = format[j][i];
						num++;
					}
					timesThrough++;
				}

				for (i = 2; i < 3; i++) {
					for (j = 0; j < 7; j++) {
						deck[num] = format[j][i];
						num++;
					}
					timesThrough++;
				}
				for (i = 1; i < 2; i++) {
					for (j = 0; j < 7; j++) {
						deck[num] = format[j][i];
						num++;
					}
					timesThrough++;
				}
			}

			// column 1 then 3 then 2
			break;
		default:
			break;
		}

	}

	//simple function to print array to console
	private static void print2DArray(String[][] format) {
		System.out.println("Column 1   Column 2   Column 3");
		for (int i = 0; i < format.length; i++) {
			System.out.println(Arrays.toString(format[i]).replace("[", "").replace(",", "").replace(" ", "         ")
					.replace("]", ""));
		}

	}

	//builds the deck
	private static void BuildDeck(String[] deck, int i) {
		Random rand = new Random();
		boolean firstTime = true;
		boolean inDeck = false;
		int randCard;

		// Hard code a full deck to choose from
		String[] fullDeck = { "AC", "AD", "AH", "AS", "2C", "2D", "2H", "2S", "3C", "3D", "3H", "3S", "4C", "4D", "4H",
				"4S", "5C", "5D", "5H", "5S", "6C", "6D", "6H", "6S", "7C", "7D", "7H", "7S", "8C", "8D", "8H", "8S",
				"9C", "9D", "9H", "9S", "10C", "10D", "10H", "10S", "JC", "JD", "JH", "JS", "QC", "QD", "QH", "QS",
				"KC", "KD", "KH", "KS" };

		int[] usedCards = new int[21];

		int j = 0;
		while (j < 21) {
			inDeck = false;
			randCard = rand.nextInt(52);

			// duplicate check needs a card in to work, add one on the first run!
			if (firstTime == true) {
				usedCards[j] = randCard;
				deck[j] = fullDeck[randCard];
				firstTime = false;
				j++;
			}

			usedCards[j] = randCard;

			// Loop checking for duplicates
			if (firstTime != true) {
				int k = 0;
				for (k = 0; k < j; k++) {
					if (usedCards[k] == randCard) {
						// System.out.println("Card already in deck!");
						inDeck = true;
					}
				}
				// If no duplicates... add it to the deck!
				if (inDeck == false) {
					deck[j] = fullDeck[randCard];
					j++;
				}
			}
		}
	}
}
